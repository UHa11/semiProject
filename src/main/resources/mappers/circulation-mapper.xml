<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.project.cse.boot.mappers.CirculationMapper">
    <resultMap id="circulationResult" type="Circulation">
        <result column="CIRCULATION_NO" property="circulationNo"/>
        <result column="STORE_NO" property="storeNo"/>
        <result column="PRODUCT_NO" property="productNo"/>
        <result column="INPUT_PRICE" property="inputPrice"/>
        <result column="SALE_PRICE" property="salePrice"/>
        <result column="CIRCULATION_AMOUNT" property="circulationAmount"/>
        <result column="CIRCULATION_DATE" property="circulationDate"/>
        <result column="STATUS" property="status"/>
        <result column="STORE_NAME" property="storeName"/>
        <result column="PRODUCT_NAME" property="productName"/>
        <result column="CATEGORY_NAME" property="categoryName"/>
        <result column="SUM_INPUT_PRICE" property="sumInputPrice"/>

        <!-- 발주목록 가져오기 -->
        <result column="SET_NO" property="setNo"/>
        <result column="ROWNUM" property="rowNum"/>
        <result column="RNUM" property="rnum"/>
        <result column="MINUTE_GROUP" property="minuteGroup"/>
        <result column="TOTAL_AMOUNT" property="totalAmount"/>
        <result column="TOTAL_INPUT_PRICE" property="totalInputPrice"/>
    </resultMap>

    <!-- 매출 전용 -->
    <resultMap id="circulationSummaryResult" type="Circulation">
        <result column="CIRCULATION_DATE" property="circulationDate"/>
        <result column="INPUT_PRICE" property="inputPrice"/>
        <result column="SALE_PRICE" property="salePrice"/>
        <result column="CIRCULATION_AMOUNT" property="circulationAmount"/>
    </resultMap>


    <insert id="insertOrder">
        INSERT INTO CIRCULATION (
            CIRCULATION_NO,
            STORE_NO,
            SET_NO,
            PRODUCT_NO,
            INPUT_PRICE,
            SALE_PRICE,
            CIRCULATION_AMOUNT,
            CIRCULATION_DATE,
            STATUS
        ) VALUES (
            SEQ_CIR.NEXTVAL,
            #{storeNo},
            #{setNo},
            #{circulation.productNo},
            #{circulation.inputPrice},
            #{circulation.salePrice},
            #{circulation.circulationAmount},
            DEFAULT,
            1
        )
    </insert>

    <select id="orderRequestListCount" resultType="_int">
        SELECT
            COUNT(*)
        FROM (
            SELECT
                TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP
            FROM CIRCULATION
            WHERE STORE_NO = #{storeNo} AND STATUS = 1
            GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI')
        )
    </select>

    <select id="orderRequestList" resultMap="circulationResult">
        SELECT
            TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP,
            SET_NO,
            SUM(CIRCULATION_AMOUNT) AS TOTAL_AMOUNT,
            SUM(CIRCULATION_AMOUNT * INPUT_PRICE) AS TOTAL_INPUT_PRICE,
            STATUS
        FROM  CIRCULATION
        WHERE  STORE_NO = #{storeNo} AND STATUS = 1
        GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI'), SET_NO, STATUS
        ORDER BY SET_NO DESC
    </select>

    <select id="orderSearchListCount" resultType="_int">
        SELECT COUNT(*)
        FROM (
            SELECT
                TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP,
                SET_NO,
                SUM(CIRCULATION_AMOUNT) AS TOTAL_AMOUNT,
                SUM(CIRCULATION_AMOUNT * INPUT_PRICE) AS TOTAL_INPUT_PRICE,
                STATUS
            FROM CIRCULATION
            WHERE STORE_NO = #{storeNo}
                <if test="startDate != null and endDate == null">
                    AND CIRCULATION_DATE &gt;= #{startDate}
                </if>
                <if test="endDate != null and startDate == null">
                    AND CIRCULATION_DATE &lt;= #{endDate}
                </if>
                <if test="startDate != null and endDate != null">
                    AND CIRCULATION_DATE BETWEEN #{startDate} AND #{endDate}
                </if>
                <if test="status != null">
                    AND STATUS = #{status}
                </if>
                <if test="setNo != null and setNo != ''">
                    AND SET_NO LIKE '%' || #{setNo} || '%'
                </if>
            GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI'), SET_NO, STATUS
        )
    </select>

    <select id="orderSearchList" resultMap="circulationResult">
        SELECT
            TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP,
            SET_NO,
            SUM(CIRCULATION_AMOUNT) AS TOTAL_AMOUNT,
            SUM(CIRCULATION_AMOUNT * INPUT_PRICE) AS TOTAL_INPUT_PRICE,
            STATUS
        FROM CIRCULATION
        WHERE STORE_NO = #{storeNo}
            <if test="startDate != null and endDate == null">
                AND CIRCULATION_DATE &gt;= #{startDate}
            </if>
            <if test="endDate != null and startDate == null">
                AND CIRCULATION_DATE &lt;= #{endDate}
            </if>
            <if test="startDate != null and endDate != null">
                AND CIRCULATION_DATE BETWEEN #{startDate} AND #{endDate}
            </if>
            <if test="status != null">
                AND STATUS = #{status}
            </if>
            <if test="setNo != null and setNo != ''">
                AND SET_NO LIKE '%' || #{setNo} || '%'
            </if>
        GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI'), SET_NO, STATUS
        ORDER BY SET_NO DESC
    </select>

    <select id="spotOrderDetail" resultMap="circulationResult">
        SELECT
            P.PRODUCT_NO AS PRODUCT_NO,
            Y.CATEGORY_NAME AS CATEGORY_NAME,
            P.PRODUCT_NAME AS PRODUCT_NAME,
            C.CIRCULATION_AMOUNT AS CIRCULATION_AMOUNT,
            (C.CIRCULATION_AMOUNT * C.INPUT_PRICE) AS SUM_INPUT_PRICE
        FROM CIRCULATION C
            LEFT JOIN STORE S ON C.STORE_NO = S.STORE_NO
            LEFT JOIN PRODUCT P ON C.PRODUCT_NO = P.PRODUCT_NO
            LEFT JOIN CATEGORY Y ON P.CATEGORY_NO = Y.CATEGORY_NO
        WHERE C.SET_NO = #{setNo}
    </select>

    <select id="previousMonthOrder" resultMap="circulationResult">
        SELECT
            TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP,
            SET_NO,
            SUM(CIRCULATION_AMOUNT) AS TOTAL_AMOUNT,
            SUM(CIRCULATION_AMOUNT * INPUT_PRICE) AS TOTAL_INPUT_PRICE,
            STORE_NAME,
            STATUS
        FROM  CIRCULATION C
        LEFT JOIN STORE S ON (C.STORE_NO = S.STORE_NO)
        WHERE STORE_NO = #{storeNo}
        AND CIRCULATION_DATE BETWEEN #{start} AND #{end}
        GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI'), SET_NO, STATUS, STORE_NAME
        ORDER BY SET_NO DESC
    </select>

    <select id="selectCirculationlist" resultMap="circulationResult">
        SELECT
        TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP,
        SET_NO,
        SUM(CIRCULATION_AMOUNT) AS TOTAL_AMOUNT,
        SUM(CIRCULATION_AMOUNT * INPUT_PRICE) AS TOTAL_INPUT_PRICE,
        STORE_NAME,
        STATUS
        FROM  CIRCULATION C
        LEFT JOIN STORE S ON (C.STORE_NO = S.STORE_NO)
        WHERE STATUS IN (1,5,6,7)
        GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI'), SET_NO, STATUS, STORE_NAME
        ORDER BY SET_NO DESC
    </select>

    <select id="selectcirculation" resultType="_int">
        SELECT
        COUNT(*)
        FROM (
        SELECT
        TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP
        FROM CIRCULATION
        WHERE STATUS IN (1,5,6,7)
        GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI')
        )
    </select>

    <select id="getOderDetail" resultMap="circulationResult">
        SELECT
        P.PRODUCT_NO AS PRODUCT_NO,
        Y.CATEGORY_NAME AS CATEGORY_NAME,
        P.PRODUCT_NAME AS PRODUCT_NAME,
        C.CIRCULATION_AMOUNT AS CIRCULATION_AMOUNT,
        (C.CIRCULATION_AMOUNT * C.INPUT_PRICE) AS SUM_INPUT_PRICE
        FROM CIRCULATION C
        LEFT JOIN STORE S ON C.STORE_NO = S.STORE_NO
        LEFT JOIN PRODUCT P ON C.PRODUCT_NO = P.PRODUCT_NO
        LEFT JOIN CATEGORY Y ON P.CATEGORY_NO = Y.CATEGORY_NO
        WHERE C.SET_NO = #{setNo}
    </select>

    <select id="head_lastorder" resultMap="circulationResult">
        SELECT
        TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI') AS MINUTE_GROUP,
        SET_NO,
        SUM(CIRCULATION_AMOUNT) AS TOTAL_AMOUNT,
        SUM(CIRCULATION_AMOUNT * INPUT_PRICE) AS TOTAL_INPUT_PRICE,
        STORE_NAME,
        STATUS
        FROM  CIRCULATION C
        LEFT JOIN STORE S ON (C.STORE_NO = S.STORE_NO)
        WHERE STATUS IN (1,5,6,7)
        AND CIRCULATION_DATE BETWEEN #{start} AND #{end}
        GROUP BY TO_CHAR(CIRCULATION_DATE, 'YYYY-MM-DD HH24:MI'), SET_NO, STATUS, STORE_NAME
        ORDER BY SET_NO DESC
    </select>

    <!-- 매출 자료 (자동계산) -->
    <select id="selectSalesMonth" resultMap="circulationSummaryResult">
        SELECT
        CIRCULATION_DATE,
        SUM(INPUT_PRICE * CIRCULATION_AMOUNT) AS INPUT_PRICE,
        SUM(SALE_PRICE * CIRCULATION_AMOUNT) AS SALE_PRICE,
        SUM(CIRCULATION_AMOUNT) AS CIRCULATION_AMOUNT
        FROM
        CIRCULATION
        WHERE
        STORE_NO = #{storeNo}
        AND CIRCULATION_DATE &gt; #{startDate}
        AND CIRCULATION_DATE &lt; #{endDate}
        GROUP BY
        CIRCULATION_DATE
        ORDER BY
        CIRCULATION_DATE ASC
    </select>
    <!-- 상세 유통 내역 (모달용) -->
    <select id="getDetailsByDate" resultMap="circulationResult">
        SELECT
        c.CIRCULATION_NO,
        c.STORE_NO,
        c.PRODUCT_NO,
        c.INPUT_PRICE,
        c.SALE_PRICE,
        c.CIRCULATION_AMOUNT,
        TO_CHAR(c.CIRCULATION_DATE, 'YYYY-MM-DD') AS CIRCULATION_DATE,
        c.STATUS,
        s.STORE_NAME,
        p.PRODUCT_NAME,
        ca.CATEGORY_NAME
        FROM CIRCULATION c
        JOIN STORE s ON c.STORE_NO = s.STORE_NO
        JOIN PRODUCT p ON c.PRODUCT_NO = p.PRODUCT_NO
        JOIN CATEGORY ca ON p.CATEGORY_NO = ca.CATEGORY_NO
        WHERE c.STORE_NO = #{storeNo}
        AND TO_CHAR(c.CIRCULATION_DATE, 'YYYY-MM-DD') = #{date}
    </select>


    <!--본사 승인 미승인-->
    <update id="updateheadorder">
        UPDATE CIRCULATION
        SET STATUS = #{status}
        WHERE SET_NO = #{setNo}
    </update>


</mapper>